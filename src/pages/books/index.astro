---
import Layout from '../../layouts/Layout.astro'

export const prerender = true;;

import { getCollection } from 'astro:content';
const books = await getCollection('book');
const currentYear = new Date().getFullYear();
const booksTotalCurrentYear = books.filter(
	book => book.data.date_finished && new Date(book.data.date_finished).getFullYear() === currentYear
).length;
---

<Layout title="Reading | Henry Percy">
	<main>
		<section class="prose prose-stone dark:prose-invert max-w-3xl">
			<h1 class="mb-4 text-3xl font-bold leading-none tracking-tight md:text-4xl">Reading</h1>
			<p>This is my personal reading log. On it you'll find the books I've read, the book I am currently reading, as well as some information on each one.</p>
			<p>My goal for {new Date().getFullYear()} is to read <strong>5</strong> books. So far, I have finished <strong>{booksTotalCurrentYear}</strong> {booksTotalCurrentYear === 1 ? 'book' : 'books'}.</p>
			<ul class="not-prose space-y-4 mt-10">
				{(() => {
					const formatDate = (date) =>
						date instanceof Date
							? date.toISOString().slice(0, 10)
							: new Date(date).toISOString().slice(0, 10);

					const daysBetween = (start, end) => {
						const s = new Date(start);
						const e = new Date(end);
						return Math.round((e - s) / (1000 * 60 * 60 * 24));
					};

					const currentlyReading = books.filter(b => !b.data.date_finished);
					const finishedBooks = books.filter(b => b.data.date_finished);

					const booksByYear = {};
					for (const book of finishedBooks) {
						const year = new Date(book.data.date_finished).getFullYear();
						if (!booksByYear[year]) booksByYear[year] = [];
						booksByYear[year].push(book);
					}
					const sortedYears = Object.keys(booksByYear).sort((a, b) => b - a);

					const renderBook = (book) => {
						const wordCount = book.data.word_count || 0;
						const startDate = book.data.date_started;
						const finishDate = book.data.date_finished;
						const pace =
							startDate && finishDate && wordCount
								? Math.round(wordCount / Math.max(1, daysBetween(startDate, finishDate))).toLocaleString()
								: null;

						return (
							<li class="grid grid-cols-1 sm:grid-cols-[250px_1fr] items-start bg-neutral-200 dark:bg-neutral-800 rounded group">
								<div class="flex items-center justify-center h-full">
									<img
										src={book.data.image_url}
										alt={book.data.title}
										class="block h-full w-full object-fit max-sm:rounded-t sm:rounded-l"
									/>
								</div>
								<div class="space-y-4 py-4 px-6">
									<div class="flex justify-between items-center mb-4 pb-4 border-b border-neutral-300 dark:border-neutral-700 gap-x-8">
										<div class="space-y-0.5">
											<div class="font-bold flex gap-x-2 items-baseline text-balance">
												{book.data.title}
											</div>
											{book.data.headline && (
												<div class="text-xs text-neutral-600 dark:text-neutral-400">
													{book.data.headline}
												</div>
											)}
											<div class="text-sm">
												{book.data.authors.join(', ')}
												{book.data.translators?.length > 0 && (
													<span class="ml-2 text-xs text-neutral-500">
														(Translators: {book.data.translators.join(', ')})
													</span>
												)}
											</div>
										</div>
									</div>
									<dl class="grid sm:grid-cols-[max-content_1fr] gap-x-4 gap-y-1 text-sm md:text-xs">
										<dd class="font-semibold">Started at</dd>
										<dt class="tabular-nums text-neutral-600 dark:text-neutral-400">
											{startDate ? formatDate(startDate) : '—'}
										</dt>
										<dd class="font-semibold">Finished at</dd>
										<dt class="tabular-nums text-neutral-600 dark:text-neutral-400">
											{finishDate ? (
												<>
													{formatDate(finishDate)}
													{startDate && (
														<> ({daysBetween(startDate, finishDate)} days)</>
													)}
												</>
											) : '—'}
										</dt>
										<dd class="font-semibold">Release date</dd>
										<dt class="tabular-nums text-neutral-600 dark:text-neutral-400">
											{book.data.date_published ? formatDate(book.data.date_published) : '—'}
										</dt>
										<dd class="font-semibold">Word count</dd>
										<dt class="tabular-nums text-neutral-600 dark:text-neutral-400">
											{wordCount ? wordCount.toLocaleString() : '—'}
										</dt>
										<dd class="font-semibold">Pace</dd>
										<dt class="tabular-nums text-neutral-600 dark:text-neutral-400">
											{pace ? `${pace} words per day` : '—'}
										</dt>
										<dd class="font-semibold">Rating</dd>
										<dt class="tabular-nums text-neutral-600 dark:text-neutral-400 flex items-center gap-2">
											{book.data.rating ? (
												<>
													<span class="flex items-center gap-1 text-yellow-500">
														{Array.from({ length: 5 }).map((_, i) => (
															<svg key={i} xmlns="http://www.w3.org/2000/svg" fill={i < Math.round(book.data.rating) ? "currentColor" : "none"} viewBox="0 0 24 24" stroke="currentColor" class="w-4 h-4">
																<path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z" />
															</svg>
														))}
													</span>
												</>
											) : '—'}
										</dt>
										<dd class="font-semibold">Format</dd>
										<dt class="tabular-nums text-neutral-600 dark:text-neutral-400">
											{book.data.format}
										</dt>
										<dd class="font-semibold">Language</dd>
										<dt class="tabular-nums text-neutral-600 dark:text-neutral-400">
											{book.data.language}
										</dt>
										{book.data.genres?.length > 0 && (
											<>
												<dd class="font-semibold">Genres</dd>
												<dt class="tabular-nums text-neutral-600 dark:text-neutral-400 flex flex-wrap gap-2">
													{book.data.genres.map(genre => (
														<span class="bg-neutral-100 dark:bg-neutral-900 text-neutral-800 dark:text-neutral-200 px-2 py-0.5 rounded">{genre}</span>
													))}
												</dt>
											</>
										)}
									</dl>
								</div>
							</li>
						);
					};

					const elements = [];

					if (currentlyReading.length > 0) {
						elements.push(
							<li key="currently-reading-title" class="col-span-full">
								<h2 class="text-2xl font-bold mt-8 mb-4">Currently Reading</h2>
							</li>
						);
						currentlyReading.forEach(book => {
							elements.push(renderBook(book));
						});
					}

					sortedYears.forEach(year => {
						elements.push(
							<li key={`year-title-${year}`} class="col-span-full">
								<h2 class="text-2xl font-bold mt-8 mb-4">{year}</h2>
							</li>
						);
						booksByYear[year]
							.sort((a, b) => Number(new Date(b.data.date_finished)) - Number(new Date(a.data.date_finished)))
							.forEach(book => {
								elements.push(renderBook(book));
							});
					});

					return elements;
				})()}
			</ul>
		</section>
	</main>
</Layout>
